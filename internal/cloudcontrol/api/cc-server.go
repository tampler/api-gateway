// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /metrics)
	GetMetrics(ctx echo.Context) error
	// Cloud Control List Action
	// (POST /v1)
	PostV1(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetMetrics converts echo context to params.
func (w *ServerInterfaceWrapper) GetMetrics(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMetrics(ctx)
	return err
}

// PostV1 converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostV1(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/metrics", wrapper.GetMetrics)
	router.POST(baseURL+"/v1", wrapper.PostV1)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RW0W7bOgz9FYP3Pjpx2t4LFH7r0mIosHZFi23AijyoMpOotSWVooMEgf99kBQnTewF",
	"K9A9RbLIwyPykMoapKms0ajZQb4GQmeNdhg2D0gLpCsiQ34rjWbU7JfC2lJJwcro7NkZ7b85OcdK+NW/",
	"hFPI4Z9sh53FU5dFtKZpUijQSVLWg0AO15qRtCiTGDVpDdMNcGC05WLJWCRWkag0BfrffcRgnISzFKaG",
	"KsGQg9J8dgop8Mpi3OIMCZoUKnROzH4L1B5vXR2T0rNAkfC1VoQF5I+wCdiaT5oUboQuBBtadalfyBhk",
	"Dajryvt/UY4hhTGhYA90j6KAFL7ZIu4vscSwuK1f4rkz5QJhckgsheXACKsGntEM9QCXTGLAYhYiL0Sp",
	"AmS+o+/vMjZVJXThTT4A7yA5m+vuouxYm6dnlOwLcYNMSgZQxVi5LpVm6yWIxMrvv4ZquW6Gr5ayrKM+",
	"/hztTpCo3sngp9H4tpAFTkVd+lpSPajcy2DUrVHT9Nz/Hl9rdNy9yp6OjnXZznA/M8d8WrPDku2w+mr1",
	"UEuJriftF1b1Zu1ScBgS24Z8WnFPU6Vh+iiJPSAHBFvDNMTcROhy9W5KT023v8elqYtkbDSTKZOLu2tP",
	"R3HpvW9/PCR95wskF70Xo+FoeOoZG4ta+GvD2XA0PIMUrOB5yEZW7TQ9w1Ban6wwQa8LyOEzciv7dH8K",
	"n45G75q+W8EeFcgmVkfG3cG8YZ60pCBYRGn/9Veh1ri0KBmLBFubJoVscRIUZ1xPKu+M4+8nEEWCjj+Z",
	"YvVhTNve7OE6Hid+didPPt5biTLV2HSqevJhnNoePMJpkITxvFfE/6Ow+pC3VLO3/wHCY1xXlfAD6KBr",
	"QpTtdI9vwiNUQmmYBF4uAPmva6iphBzmzDbPstJIUc6N4/x8dP6fr2wzaX4FAAD//zHAbEuYCAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
